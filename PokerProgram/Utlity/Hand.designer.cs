#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Utlity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Poker")]
	public partial class HandDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHand(Hand instance);
    partial void UpdateHand(Hand instance);
    partial void DeleteHand(Hand instance);
    #endregion
		
		public HandDataContext() : 
				base(global::Utlity.Properties.Settings.Default.PokerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HandDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HandDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HandDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HandDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hand> Hands
		{
			get
			{
				return this.GetTable<Hand>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hands")]
	public partial class Hand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _card1;
		
		private string _card2;
		
		private string _card3;
		
		private string _card4;
		
		private string _card5;
		
		private System.Nullable<int> _score;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void Oncard1Changing(string value);
    partial void Oncard1Changed();
    partial void Oncard2Changing(string value);
    partial void Oncard2Changed();
    partial void Oncard3Changing(string value);
    partial void Oncard3Changed();
    partial void Oncard4Changing(string value);
    partial void Oncard4Changed();
    partial void Oncard5Changing(string value);
    partial void Oncard5Changed();
    partial void OnscoreChanging(System.Nullable<int> value);
    partial void OnscoreChanged();
    #endregion
		
		public Hand()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_card1", DbType="VarChar(2)")]
		public string card1
		{
			get
			{
				return this._card1;
			}
			set
			{
				if ((this._card1 != value))
				{
					this.Oncard1Changing(value);
					this.SendPropertyChanging();
					this._card1 = value;
					this.SendPropertyChanged("card1");
					this.Oncard1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_card2", DbType="VarChar(2)")]
		public string card2
		{
			get
			{
				return this._card2;
			}
			set
			{
				if ((this._card2 != value))
				{
					this.Oncard2Changing(value);
					this.SendPropertyChanging();
					this._card2 = value;
					this.SendPropertyChanged("card2");
					this.Oncard2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_card3", DbType="VarChar(2)")]
		public string card3
		{
			get
			{
				return this._card3;
			}
			set
			{
				if ((this._card3 != value))
				{
					this.Oncard3Changing(value);
					this.SendPropertyChanging();
					this._card3 = value;
					this.SendPropertyChanged("card3");
					this.Oncard3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_card4", DbType="VarChar(2)")]
		public string card4
		{
			get
			{
				return this._card4;
			}
			set
			{
				if ((this._card4 != value))
				{
					this.Oncard4Changing(value);
					this.SendPropertyChanging();
					this._card4 = value;
					this.SendPropertyChanged("card4");
					this.Oncard4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_card5", DbType="VarChar(2)")]
		public string card5
		{
			get
			{
				return this._card5;
			}
			set
			{
				if ((this._card5 != value))
				{
					this.Oncard5Changing(value);
					this.SendPropertyChanging();
					this._card5 = value;
					this.SendPropertyChanged("card5");
					this.Oncard5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Int")]
		public System.Nullable<int> score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
