#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PokerGame
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Poker")]
	public partial class PokerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRound(Round instance);
    partial void UpdateRound(Round instance);
    partial void DeleteRound(Round instance);
    #endregion
		
		public PokerDataContext() : 
				base(global::PokerGame.Properties.Settings.Default.PokerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PokerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PokerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PokerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PokerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Round> Rounds
		{
			get
			{
				return this.GetTable<Round>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Round")]
	public partial class Round : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableId;
		
		private string _Hand1;
		
		private string _Hand2;
		
		private string _Hand3;
		
		private string _Hand4;
		
		private string _Hand5;
		
		private string _Hand6;
		
		private string _Hand7;
		
		private string _Hand8;
		
		private string _Hand9;
		
		private int _BigBlind;
		
		private int _LittleBlind;
		
		private string _TurnOver;
		
		private string _Run;
		
		private string _River;
		
		private string _AdditionalInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnHand1Changing(string value);
    partial void OnHand1Changed();
    partial void OnHand2Changing(string value);
    partial void OnHand2Changed();
    partial void OnHand3Changing(string value);
    partial void OnHand3Changed();
    partial void OnHand4Changing(string value);
    partial void OnHand4Changed();
    partial void OnHand5Changing(string value);
    partial void OnHand5Changed();
    partial void OnHand6Changing(string value);
    partial void OnHand6Changed();
    partial void OnHand7Changing(string value);
    partial void OnHand7Changed();
    partial void OnHand8Changing(string value);
    partial void OnHand8Changed();
    partial void OnHand9Changing(string value);
    partial void OnHand9Changed();
    partial void OnBigBlindChanging(int value);
    partial void OnBigBlindChanged();
    partial void OnLittleBlindChanging(int value);
    partial void OnLittleBlindChanged();
    partial void OnTurnOverChanging(string value);
    partial void OnTurnOverChanged();
    partial void OnRunChanging(string value);
    partial void OnRunChanged();
    partial void OnRiverChanging(string value);
    partial void OnRiverChanged();
    partial void OnAdditionalInfoChanging(string value);
    partial void OnAdditionalInfoChanged();
    #endregion
		
		public Round()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand1", DbType="NChar(10)")]
		public string Hand1
		{
			get
			{
				return this._Hand1;
			}
			set
			{
				if ((this._Hand1 != value))
				{
					this.OnHand1Changing(value);
					this.SendPropertyChanging();
					this._Hand1 = value;
					this.SendPropertyChanged("Hand1");
					this.OnHand1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand2", DbType="NChar(10)")]
		public string Hand2
		{
			get
			{
				return this._Hand2;
			}
			set
			{
				if ((this._Hand2 != value))
				{
					this.OnHand2Changing(value);
					this.SendPropertyChanging();
					this._Hand2 = value;
					this.SendPropertyChanged("Hand2");
					this.OnHand2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand3", DbType="NChar(10)")]
		public string Hand3
		{
			get
			{
				return this._Hand3;
			}
			set
			{
				if ((this._Hand3 != value))
				{
					this.OnHand3Changing(value);
					this.SendPropertyChanging();
					this._Hand3 = value;
					this.SendPropertyChanged("Hand3");
					this.OnHand3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand4", DbType="NChar(10)")]
		public string Hand4
		{
			get
			{
				return this._Hand4;
			}
			set
			{
				if ((this._Hand4 != value))
				{
					this.OnHand4Changing(value);
					this.SendPropertyChanging();
					this._Hand4 = value;
					this.SendPropertyChanged("Hand4");
					this.OnHand4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand5", DbType="NChar(10)")]
		public string Hand5
		{
			get
			{
				return this._Hand5;
			}
			set
			{
				if ((this._Hand5 != value))
				{
					this.OnHand5Changing(value);
					this.SendPropertyChanging();
					this._Hand5 = value;
					this.SendPropertyChanged("Hand5");
					this.OnHand5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand6", DbType="NChar(10)")]
		public string Hand6
		{
			get
			{
				return this._Hand6;
			}
			set
			{
				if ((this._Hand6 != value))
				{
					this.OnHand6Changing(value);
					this.SendPropertyChanging();
					this._Hand6 = value;
					this.SendPropertyChanged("Hand6");
					this.OnHand6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand7", DbType="NChar(10)")]
		public string Hand7
		{
			get
			{
				return this._Hand7;
			}
			set
			{
				if ((this._Hand7 != value))
				{
					this.OnHand7Changing(value);
					this.SendPropertyChanging();
					this._Hand7 = value;
					this.SendPropertyChanged("Hand7");
					this.OnHand7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand8", DbType="NChar(10)")]
		public string Hand8
		{
			get
			{
				return this._Hand8;
			}
			set
			{
				if ((this._Hand8 != value))
				{
					this.OnHand8Changing(value);
					this.SendPropertyChanging();
					this._Hand8 = value;
					this.SendPropertyChanged("Hand8");
					this.OnHand8Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hand9", DbType="NChar(10)")]
		public string Hand9
		{
			get
			{
				return this._Hand9;
			}
			set
			{
				if ((this._Hand9 != value))
				{
					this.OnHand9Changing(value);
					this.SendPropertyChanging();
					this._Hand9 = value;
					this.SendPropertyChanged("Hand9");
					this.OnHand9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BigBlind", DbType="Int NOT NULL")]
		public int BigBlind
		{
			get
			{
				return this._BigBlind;
			}
			set
			{
				if ((this._BigBlind != value))
				{
					this.OnBigBlindChanging(value);
					this.SendPropertyChanging();
					this._BigBlind = value;
					this.SendPropertyChanged("BigBlind");
					this.OnBigBlindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LittleBlind", DbType="Int NOT NULL")]
		public int LittleBlind
		{
			get
			{
				return this._LittleBlind;
			}
			set
			{
				if ((this._LittleBlind != value))
				{
					this.OnLittleBlindChanging(value);
					this.SendPropertyChanging();
					this._LittleBlind = value;
					this.SendPropertyChanged("LittleBlind");
					this.OnLittleBlindChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TurnOver", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string TurnOver
		{
			get
			{
				return this._TurnOver;
			}
			set
			{
				if ((this._TurnOver != value))
				{
					this.OnTurnOverChanging(value);
					this.SendPropertyChanging();
					this._TurnOver = value;
					this.SendPropertyChanged("TurnOver");
					this.OnTurnOverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Run", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Run
		{
			get
			{
				return this._Run;
			}
			set
			{
				if ((this._Run != value))
				{
					this.OnRunChanging(value);
					this.SendPropertyChanging();
					this._Run = value;
					this.SendPropertyChanged("Run");
					this.OnRunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_River", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string River
		{
			get
			{
				return this._River;
			}
			set
			{
				if ((this._River != value))
				{
					this.OnRiverChanging(value);
					this.SendPropertyChanging();
					this._River = value;
					this.SendPropertyChanged("River");
					this.OnRiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalInfo", DbType="VarChar(400)")]
		public string AdditionalInfo
		{
			get
			{
				return this._AdditionalInfo;
			}
			set
			{
				if ((this._AdditionalInfo != value))
				{
					this.OnAdditionalInfoChanging(value);
					this.SendPropertyChanging();
					this._AdditionalInfo = value;
					this.SendPropertyChanged("AdditionalInfo");
					this.OnAdditionalInfoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
